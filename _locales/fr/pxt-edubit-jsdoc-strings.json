{
  "edubit.i2cRead": "Lecture par l’I2C de PIC16F1937 dans le registre.",
  "edubit.i2cRead|param|register": "Adresse du registre.",
  "edubit.i2cWrite": "Ecriture par l’I2C de PIC16F1937 dans le registre.",
  "edubit.i2cWrite|param|data": "Données à écrire.",
  "edubit.i2cWrite|param|register": "Adresse du registre.",
  "edubit.limit": "Limite de la plage de valeurs d’un nombre.",
  "edubit.limit|param|max": "Valeur maximale du nombre.",
  "edubit.limit|param|min": "Valeur minimale du nombre.",
  "edubit.limit|param|value": "Nombre dont les limites ont été définies.",
  "edubitIrBit": "Blocs du capteur infrarouge (IR Bit).",
  "edubitIrBit.isIrSensorTriggered": "Retourne vrai si le capteur infrarouge est activé.",
  "edubitIrBit.onIrSensorEvent": "Fait quelquechose lorsque le capteur infrarouge est activé / désactivé.",
  "edubitIrBit.onIrSensorEvent|param|event": "Type d’événement.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Code à exécuter lorsque l’événement est déclenché.",
  "edubitIrBit.readIrSensor": "Retourne l’état du capteur infrarouge (0 ou 1).",
  "edubitMotors": "Blocs pour le servomoteur et le moteur.",
  "edubitMotors.brakeMotor": "Arrêter le moteur",
  "edubitMotors.brakeMotor|param|motor": "Emplacement du moteur. Par ex : Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Désactive le servomoteur.",
  "edubitMotors.disableServo|param|servo": "Emplacement du servomoteur.",
  "edubitMotors.runMotor": "Démarrer le moteur en marche avant ou marche arrière (Vitesse = 0-255).",
  "edubitMotors.runMotor|param|direction": "Direction du moteur.",
  "edubitMotors.runMotor|param|motor": "Emplacement du moteur.",
  "edubitMotors.runMotor|param|speed": "Vitesse du moteur (0-255). Par ex : 128",
  "edubitMotors.setServoPosition": "Définit la position du servomoteur (0-180 degrés).",
  "edubitMotors.setServoPosition|param|position": "Position du servomoteur. Par ex : 90",
  "edubitMotors.setServoPosition|param|servo": "Emplacement du servomoteur.",
  "edubitPotentioBit": "Blocs pour le potentiomètre (Potentio Bit).",
  "edubitPotentioBit.comparePot": "Compare la valeur du potentiomètre (0-1023) avec un nombre, puis retourne la valeur du test (vrai/faux).",
  "edubitPotentioBit.comparePot|param|compareType": " Supérieur à ou Inférieur à .",
  "edubitPotentioBit.comparePot|param|threshold": "Valeur de comparaison. Par ex : 512",
  "edubitPotentioBit.onEvent": "Compare la valeur du potentiomètre avec un nombre et fait quelque chose si le test renvoie vrai.",
  "edubitPotentioBit.onEvent|param|compareType": "Supérieur à ou Inférieur à.",
  "edubitPotentioBit.onEvent|param|handler": "Code à exécuter lorsque l’événement est déclenché.",
  "edubitPotentioBit.onEvent|param|threshold": "Valeur de comparaison. Par ex : 512",
  "edubitPotentioBit.readPotValue": "Retourne la valeur du potentiomètre (0-1023).",
  "edubitPower.isLowBatt": "Retourne vrai si le niveau de batterie est faible.",
  "edubitPower.isOvervoltage": "Retourne vrai en cas de surtension.",
  "edubitPower.isPowerOn": "Retourne vrai si allumé.",
  "edubitPower.readVin": "Retourne la valeur de tension d’entrée.",
  "edubitRgbBit": "Blocs des LEDs RVB (RGB Bit).",
  "edubitRgbBit.clear": "Eteindre toutes les LEDs RVB.",
  "edubitRgbBit.colors": "Retourne la couleur (connue) de la LED RVB.",
  "edubitRgbBit.rgb": "Convertit le codage rouge, vert, bleu, en une couleur RVB.",
  "edubitRgbBit.rgb|param|blue": "Valeur de la composante bleue (0 - 255). Par ex : 255",
  "edubitRgbBit.rgb|param|green": "Valeur de la composante verte (0 - 255). Par ex : 255",
  "edubitRgbBit.rgb|param|red": "Valeur de la composante rouge (0 - 255). Par ex : 255",
  "edubitRgbBit.rotatePixels": "Décale le motif selon une rotation de pas donné (-3 to 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Nombre de LEDs en rotation. Par ex : 1",
  "edubitRgbBit.setBrightness": "Définit la luminosité des LEDs RVB (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Luminosité des LEDs RVB. Par ex : 25",
  "edubitRgbBit.setPixelColor": "Affiche une couleur sur une LED RVB spécifique.",
  "edubitRgbBit.setPixelColor|param|color": "Couleur de la LED RVB.",
  "edubitRgbBit.setPixelColor|param|pixel": "Numéro de la LED dont on souhaite modifier la couleur.",
  "edubitRgbBit.shiftPixels": "Décale le motif selon une translation de pas donné (-3 to 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Nombre de LEDs en translation. Par ex : 1",
  "edubitRgbBit.showColor": "Affiche une même couleur sur toutes les LEDs RVB.",
  "edubitRgbBit.showColor|param|color": "Couleur RVB de la LED.",
  "edubitRgbBit.showRainbow": "Affiche un motif arc-en-ciel sur toutes les LEDs RVB.",
  "edubitSoundBit": "Blocs du module son (Sound Bit).",
  "edubitSoundBit.compareSoundSensor": "Compare le volume (0-1023) avec un nombre et retourne la valeur du test (vrai/faux).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "Supérieur à ou Inférieur à.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "Valeur de comparaison. Par ex : 200",
  "edubitSoundBit.onEvent": "Compare le volume avec un nombre et fait quelque chose si le test renvoie vrai.",
  "edubitSoundBit.onEvent|param|compareType": "Supérieur à ou Inférieur à.",
  "edubitSoundBit.onEvent|param|handler": "Code à executer lorsque l’événement est déclenché.",
  "edubitSoundBit.onEvent|param|threshold": "Valeur de comparaison. Par ex : 200",
  "edubitSoundBit.readSoundSensor": "Retourne le niveau du volume (0-1023).",
  "edubitTrafficLightBit": "Blocs du feu tricolore (Traffic Light Bit).",
  "edubitTrafficLightBit.digitalStatePicker": "Reçoit de l’éditeur l’état de E/S numérique.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Etat de E/S numérique. Par ex :  DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Allumer / Eteindre la DEL (On = 1, Off = 0).",
  "edubitTrafficLightBit.setLed|param|color": "Couleur de la LED.",
  "edubitTrafficLightBit.setLed|param|state": "Etat de la LED.",
  "edubitTrafficLightBit.toggleLed": "Bascule la LED.",
  "edubitTrafficLightBit.toggleLed|param|color": "Couleur de la LED."
}