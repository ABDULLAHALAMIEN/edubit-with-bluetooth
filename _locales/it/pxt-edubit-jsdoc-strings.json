{
  "edubit.i2cRead": "Legge tramite I2C dal registro del PIC16F1937.",
  "edubit.i2cRead|param|register": "Indirizzo del registro.",
  "edubit.i2cWrite": "Scrive tramite I2C sul registro del PIC16F1937.",
  "edubit.i2cWrite|param|data": "Dati da scrivere.",
  "edubit.i2cWrite|param|register": "Indirizzo del registro.",
  "edubit.limit": "Limita l’intervallo di un numero",
  "edubit.limit|param|max": "Valore massimo del numero.",
  "edubit.limit|param|min": "Valore minimo del numero.",
  "edubit.limit|param|value": "Il numero che vogliamo limitare.",
  "edubitIrBit": "Blocchi per il Bit Infrarossi",
  "edubitIrBit.isIrSensorTriggered": "Restituisce vero se il sensore infrarossi è attivato.",
  "edubitIrBit.onIrSensorEvent": "Fa qualcosa quando il sensore infrarossi è attivato / non attivato.",
  "edubitIrBit.onIrSensorEvent|param|event": "Tipo di evento.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Codice da eseguire quando si verifica l’evento.",
  "edubitIrBit.readIrSensor": "Restituisce lo stato del sensore infrarossi (0 o 1).",
  "edubitMotors": "Blocchi per motori e servomotori di edu:bit.",
  "edubitMotors.brakeMotor": "Frena il motore",
  "edubitMotors.brakeMotor|param|motor": "Canale del motore. es: Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Disabilita il servomotore.",
  "edubitMotors.disableServo|param|servo": "Canale del servomotore.",
  "edubitMotors.runMotor": "Fa girare il motore avanti o indietro (Velocità = 0-255).",
  "edubitMotors.runMotor|param|direction": "Direzione del motore",
  "edubitMotors.runMotor|param|motor": "Canale del motore.",
  "edubitMotors.runMotor|param|speed": "Velocità del motore (0-255). es: 128",
  "edubitMotors.setServoPosition": "Imposta la posizione del servomotore (0-180 gradi).",
  "edubitMotors.setServoPosition|param|position": "Posizione del servomotore. es: 90",
  "edubitMotors.setServoPosition|param|servo": "Canale del servomotore.",
  "edubitPotentioBit": "Blocchi per il Bit Potenziometro.",
  "edubitPotentioBit.comparePot": "Confronta la posizione del potenziometro (0-1023) con un numeroe restituisce il risultato (vero/falso).",
  "edubitPotentioBit.comparePot|param|compareType": "Più di oppure meno di.",
  "edubitPotentioBit.comparePot|param|threshold": "Il valore con il quale confrontare. es: 512",
  "edubitPotentioBit.onEvent": "Confronta la posizione del potenziometro (0-1023) con un numero efa qualcosa se vero.",
  "edubitPotentioBit.onEvent|param|compareType": "Più di oppure meno di.",
  "edubitPotentioBit.onEvent|param|handler": "Codice da eseguire quando si verifica l’evento.",
  "edubitPotentioBit.onEvent|param|threshold": "Il valore con il quale confrontare. es: 512",
  "edubitPotentioBit.readPotValue": "Restituisce la posizione del potenziometro (0-1023).",
  "edubitPower.isLowBatt": "Restituisce vero se la batteria è scarica.",
  "edubitPower.isOvervoltage": "Restituisce vero se c’è sovratensione.",
  "edubitPower.isPowerOn": "Restituisce vero se acceso.",
  "edubitPower.readVin": "Restituisce la tensione dell’alimentazione in ingresso",
  "edubitRgbBit": "Blocchi per il Bit RGB.",
  "edubitRgbBit.clear": "Spegni tutti i pixel RGB.",
  "edubitRgbBit.colors": "Restituisce il valore RGB di un colore conosciuto.",
  "edubitRgbBit.rgb": "Converte i canali rosso, verde, blu in un colore RGB.",
  "edubitRgbBit.rgb|param|blue": "Valore del canale blu (0 - 255). es: 255",
  "edubitRgbBit.rgb|param|green": "Valore del canale verde (0 - 255). es: 255",
  "edubitRgbBit.rgb|param|red": "Valore del canale rosso (0 - 255). es: 255",
  "edubitRgbBit.rotatePixels": "Ruota il colore dei pixel RGB (da -3 a 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Numero di pixel da ruotare. es: 1",
  "edubitRgbBit.setBrightness": "Imposta la luminosità dei pixel RGB (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Luminosità del pixel. es: 25",
  "edubitRgbBit.setPixelColor": "Imposta il colore su un singolo pixel RGB.",
  "edubitRgbBit.setPixelColor|param|color": "Colore RGB del pixel.",
  "edubitRgbBit.setPixelColor|param|pixel": "Il numero del pixel di cui vogliamo cambiare il colore.",
  "edubitRgbBit.shiftPixels": "Trasla il colore dei pixel RGB (da -3 a 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Numero di pixel da traslare. es: 1",
  "edubitRgbBit.showColor": "Mostra lo stesso colore su tutti i pixel RGB.",
  "edubitRgbBit.showColor|param|color": "Colore RGB del pixel.",
  "edubitRgbBit.showRainbow": "Mostra un motivo arcobaleno su tutti i pixel RGB.",
  "edubitSoundBit": "Blocchi per il Bit Suono.",
  "edubitSoundBit.compareSoundSensor": "Confronta il livello sonoro (0-1023) con un numero eritorna il risultato (true/false).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "Più di oppure meno di.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "Il valore con il quale confrontare. es:200",
  "edubitSoundBit.onEvent": "Confronta il livello sonoro con un numero e fa qualcosa se vero.",
  "edubitSoundBit.onEvent|param|compareType": "Più di oppure meno di.",
  "edubitSoundBit.onEvent|param|handler": "Codice da eseguire quando si verifica l’evento.",
  "edubitSoundBit.onEvent|param|threshold": "Il valore con il quale confrontare. es: 200",
  "edubitSoundBit.readSoundSensor": "Restituisce il livello sonoro (0-1023).",
  "edubitTrafficLightBit": "Blocchi per il Bit Semaforo.",
  "edubitTrafficLightBit.digitalStatePicker": "Ottiene lo stato IO digitale.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Stato IO digitale. es: DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Accende/spegne il LED (Acceso = 1, Spento = 0).",
  "edubitTrafficLightBit.setLed|param|color": "Colore del LED.",
  "edubitTrafficLightBit.setLed|param|state": "Stato del LED.",
  "edubitTrafficLightBit.toggleLed": "Alterna lo stato del LED.",
  "edubitTrafficLightBit.toggleLed|param|color": "Colore del LED."
}