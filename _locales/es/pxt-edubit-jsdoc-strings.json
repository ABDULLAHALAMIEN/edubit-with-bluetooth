{
  "edubit.i2cRead": "I2C leer del registro de PIC16F1937.",
  "edubit.i2cRead|param|register": "Dirección de registro.",
  "edubit.i2cWrite": "I2C escribir en el registro de PIC16F1937.",
  "edubit.i2cWrite|param|data": "Dato para escribir.",
  "edubit.i2cWrite|param|register": "Dirección de registro.",
  "edubit.limit": "Limitar el rango de un número.",
  "edubit.limit|param|max": "Valor máximo del número.",
  "edubit.limit|param|min": "Valor mínimo del número.",
  "edubit.limit|param|value": "El número que queremos limitar.",
  "edubitIrBit": "Bloques para Bit IR.",
  "edubitIrBit.isIrSensorTriggered": "Devuelve verdadero si el sensor IR se activa.",
  "edubitIrBit.onIrSensorEvent": "Haz algo cuando el sensor IR se active o no se active.",
  "edubitIrBit.onIrSensorEvent|param|event": "Tipo evento.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Código a ejecutar cuando se genere el evento.",
  "edubitIrBit.readIrSensor": "Devuelve el estado del sensor IR (0 o 1).",
  "edubitMotors": "Bloques servos y controlador de motores para EDU:BIT.",
  "edubitMotors.brakeMotor": "Frena el motor",
  "edubitMotors.brakeMotor|param|motor": "Canal de motor. p. ej.: Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Deshabilita el servo.",
  "edubitMotors.disableServo|param|servo": "Canal Servo.",
  "edubitMotors.runMotor": "Hacer funcionar el motor hacia adelante o hacia atrás (Velocidad = 0 a 255).",
  "edubitMotors.runMotor|param|direction": "Dirección del motor.",
  "edubitMotors.runMotor|param|motor": "Canal motor.",
  "edubitMotors.runMotor|param|speed": "Velocidad motor (0-255).p.ej: 128",
  "edubitMotors.setServoPosition": "Establece la posición del servo (0-180 grados).",
  "edubitMotors.setServoPosition|param|position": "Posición del Servo ej.: 90",
  "edubitMotors.setServoPosition|param|servo": "Canal servo.",
  "edubitPotentioBit": "Bloques para Potenciómetro Bit.",
  "edubitPotentioBit.comparePot": "Compare el valor del potenciómetro (0-1023) con un número y devuelva el resultado (verdadero/falso)",
  "edubitPotentioBit.comparePot|param|compareType": "Más que o menos que.",
  "edubitPotentioBit.comparePot|param|threshold": "El valor con el que comparar. por ejemplo: 512",
  "edubitPotentioBit.onEvent": "Compara el valor del potenciómetro con un número y haz algo cuando sea cierto.",
  "edubitPotentioBit.onEvent|param|compareType": "Más que o menos que.",
  "edubitPotentioBit.onEvent|param|handler": "Código para ejecutar cuando se genere el evento.",
  "edubitPotentioBit.onEvent|param|threshold": "El valor con el que comparar, por ejemplo: 512",
  "edubitPotentioBit.readPotValue": "Valor devuelto por el potenciómetro (0-1023).",
  "edubitPower.isLowBatt": "Devuelve verdadero si la batería está baja.",
  "edubitPower.isOvervoltage": "Devuelve verdadero si hay una sobretensión.",
  "edubitPower.isPowerOn": "Retorna verdadero si la alimentación esta encendida.",
  "edubitPower.readVin": "Devuelve el valor de la tensión de alimentación.",
  "edubitRgbBit": "Bloques para RGB Bit.",
  "edubitRgbBit.clear": "Desactiva todos los LEDs RGB.",
  "edubitRgbBit.colors": "Devuelve el valor RGB de un color conocido.",
  "edubitRgbBit.rgb": "Convierte los canales rojo, verde y azul en un color RGB.",
  "edubitRgbBit.rgb|param|blue": "Valor del canal azul (0 - 255). ej: 255",
  "edubitRgbBit.rgb|param|green": "Valor del canal verde (0 - 255). ej: 255",
  "edubitRgbBit.rgb|param|red": "Valor del canal rojo (0 - 255). ej: 255",
  "edubitRgbBit.rotatePixels": "Rotar el color de los píxeles RGB (-3 a 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Número de píxeles para rotar. Por ejemplo: 1",
  "edubitRgbBit.setBrightness": "Establecer el brillo de los píxeles RGB (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Brillo de píxeles. p. ej.: 25",
  "edubitRgbBit.setPixelColor": "Mostrar color en píxeles RGB individuales.",
  "edubitRgbBit.setPixelColor|param|color": "Color RGB del LED.",
  "edubitRgbBit.setPixelColor|param|pixel": "El número de píxel que queremos cambiar el color.",
  "edubitRgbBit.shiftPixels": "Cambia el color de los LED RGB (-3 a 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Número de píxeles para desplazar. Por ejemplo: 1",
  "edubitRgbBit.showColor": "Mostrar el mismo color en todos los píxeles RGB.",
  "edubitRgbBit.showColor|param|color": "Mostrar el mismo color en todos los píxeles RGB.",
  "edubitRgbBit.showRainbow": "Mostrar un patrón de arcoíris en todos los píxeles RGB.",
  "edubitSoundBit": "Bloques par Sonido Bit.",
  "edubitSoundBit.compareSoundSensor": "Compara el nivel de sonido (0-1023) con un número y devuelva el resultado (verdadero/falso).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "Más que o menos que.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "El valor con el que comparar, por ejemplo: 200",
  "edubitSoundBit.onEvent": "Compara el valor del nivel de sonido con un número y haz algo cuando sea cierto.",
  "edubitSoundBit.onEvent|param|compareType": "Más que o menos que.",
  "edubitSoundBit.onEvent|param|handler": "Código para ejecutar cuando se genere el evento.",
  "edubitSoundBit.onEvent|param|threshold": "El valor con el que comparar, por ejemplo: 200",
  "edubitSoundBit.readSoundSensor": "Nivel de sonido devuelto (0-1023).",
  "edubitTrafficLightBit": "Bloques para Semáforo Bit.",
  "edubitTrafficLightBit.digitalStatePicker": "Obtiene para el editor el estado de E/S digital.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Estado de E/S digital. Por ejemplo: DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Enciende/apaga el LED (Encendido = 1, Apagado = 0).",
  "edubitTrafficLightBit.setLed|param|color": "Color del LED.",
  "edubitTrafficLightBit.setLed|param|state": "Estado del LED.",
  "edubitTrafficLightBit.toggleLed": "Alternar estado del LED.",
  "edubitTrafficLightBit.toggleLed|param|color": "Color del LED."
}