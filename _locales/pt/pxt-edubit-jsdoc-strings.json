{
  "edubit.i2cRead": "I2C ler do registo de PIC16F1937.",
  "edubit.i2cRead|param|register": "Direção do registo.",
  "edubit.i2cWrite": "I2C escrever no registo de PIC16F1937.",
  "edubit.i2cWrite|param|data": "Dados para escrever.",
  "edubit.i2cWrite|param|register": "Direção de registo.",
  "edubit.limit": "Limitar o intervalo de um número.",
  "edubit.limit|param|max": "Valor máximo do número.",
  "edubit.limit|param|min": "Valor mínimo do número.",
  "edubit.limit|param|value": "El número que queremos limitar.",
  "edubitIrBit": "Blocos para Bit IR.",
  "edubitIrBit.isIrSensorTriggered": "Retorna verdadeiro se o sensor IR for ativado",
  "edubitIrBit.onIrSensorEvent": "Faz algo quando el sensor IR for ativado ou desativado.",
  "edubitIrBit.onIrSensorEvent|param|event": "Tipo evento.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Código a executar quando se gerar o evento.",
  "edubitIrBit.readIrSensor": "Devolve el estado del sensor IR (0 o 1).",
  "edubitMotors": "Blocos servos e controlador de motores para EDU:BIT.",
  "edubitMotors.brakeMotor": "Trava o motor",
  "edubitMotors.brakeMotor|param|motor": "Canal de motor. por ex.: Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Desativa o servo.",
  "edubitMotors.disableServo|param|servo": "Canal Servo.",
  "edubitMotors.runMotor": "Fazer funcionar o motor para a frente ou para trás (Velocidade = 0 a 255).",
  "edubitMotors.runMotor|param|direction": "Direção do motor.",
  "edubitMotors.runMotor|param|motor": "Canal motor.",
  "edubitMotors.runMotor|param|speed": "Velocidade do motor (0-255).p.ej: 128",
  "edubitMotors.setServoPosition": "Estabelece a posição do servo (0-180 graus).",
  "edubitMotors.setServoPosition|param|position": "Posição do Servo ex.: 90",
  "edubitMotors.setServoPosition|param|servo": "Canal servo.",
  "edubitPotentioBit": "Blocos para Potenciómetro Bit.",
  "edubitPotentioBit.comparePot": "Compara o valor do potenciómetro (0-1023) con um número e devolve o resultado (verdadeiro/falso)",
  "edubitPotentioBit.comparePot|param|compareType": "Maior ou menor que .",
  "edubitPotentioBit.comparePot|param|threshold": "O valor com o qual comparar. Por exemplo: 512",
  "edubitPotentioBit.onEvent": "Compara o valor do potenciómetro com um número e faz algo quando se forem iguais.",
  "edubitPotentioBit.onEvent|param|compareType": "Maior ou menor que .",
  "edubitPotentioBit.onEvent|param|handler": "Código para executar quando se gera o evento.",
  "edubitPotentioBit.onEvent|param|threshold": "O valor com o qual comparar. Por exemplo: 512",
  "edubitPotentioBit.readPotValue": "Valor devolvido pelo potenciómetro (0-1023).",
  "edubitPower.isLowBatt": "Devolve verdadeiro se a bateria está baixa.",
  "edubitPower.isOvervoltage": "Devolve verdadeiro se houver sobretensão.",
  "edubitPower.isPowerOn": "Devolve verdadeiro se a fonte de alimentação está ligada.",
  "edubitPower.readVin": "Devolve o valor da tensão da fonte de alimentação.",
  "edubitRgbBit": "Blocos para RGB Bit.",
  "edubitRgbBit.clear": "Desativa todos os LEDs RGB.",
  "edubitRgbBit.colors": "Devolve o valor RGB de uma cor conhecida.",
  "edubitRgbBit.rgb": "Convert os canis vermelho, verde e azul numa cor RGB.",
  "edubitRgbBit.rgb|param|blue": "Valor do canal azul (0 - 255). ex: 255",
  "edubitRgbBit.rgb|param|green": "Valor do canal verde (0 - 255). ex: 255",
  "edubitRgbBit.rgb|param|red": "Valor do canal vermelho (0 - 255). ex: 255",
  "edubitRgbBit.rotatePixels": "Rodar a cor dos pixeis RGB (-3 a 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Número de pixeis para rodar. Por exemplo: 1",
  "edubitRgbBit.setBrightness": "Alterar o brilho dos pixeis RGB (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Brilho de pixeis. p. ex.: 25",
  "edubitRgbBit.setPixelColor": "Mostrar cor num pixel RGB individual.",
  "edubitRgbBit.setPixelColor|param|color": "Color RGB del LED.",
  "edubitRgbBit.setPixelColor|param|pixel": "O número do pixel que queremos alterar a cor.",
  "edubitRgbBit.shiftPixels": "Altera a cor dos LED RGB (-3 a 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Número de pixeis para deslocar. Por exemplo: 1",
  "edubitRgbBit.showColor": "Mostrar a mesma cor em todos os pixeis RGB.",
  "edubitRgbBit.showColor|param|color": "Mostrar a mesma color en todos os pixeis RGB.",
  "edubitRgbBit.showRainbow": "Mostrar um padrão de arco-íris em todos os pixeis RGB.",
  "edubitSoundBit": "Blocos para Som Bit.",
  "edubitSoundBit.compareSoundSensor": "Compara o nível de som (0-1023) con um número e devolve o resultado (verdadeiro/falso).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "Maior ou menor que.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "O valor a comparar. por exemplo: 200",
  "edubitSoundBit.onEvent": "Compara o valor do nível de som com um numero e faz algo se for igual.",
  "edubitSoundBit.onEvent|param|compareType": "Maior ou menor que.",
  "edubitSoundBit.onEvent|param|handler": "Código para executar quando se gera o evento.",
  "edubitSoundBit.onEvent|param|threshold": "O valor a comparar. por exemplo: 200",
  "edubitSoundBit.readSoundSensor": "Nível de som devolvido (0-1023).",
  "edubitTrafficLightBit": "Blocos para Semáforo Bit.",
  "edubitTrafficLightBit.digitalStatePicker": "Devolve o estado da E/S digital para o editor.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Estado de E/S digital. Por exemplo: DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Acende/apaga o LED (Aceso = 1, Apagado = 0).",
  "edubitTrafficLightBit.setLed|param|color": "Cor do LED.",
  "edubitTrafficLightBit.setLed|param|state": "Estado do LED.",
  "edubitTrafficLightBit.toggleLed": "Alterar estado do LED.",
  "edubitTrafficLightBit.toggleLed|param|color": "Cor do LED."
}