{
  "edubit.i2cRead": "I2C aus Register PIC16F1937 lesen.",
  "edubit.i2cRead|param|register": "Registeradresse.",
  "edubit.i2cWrite": "I2C in Register PIC16F1937 schreiben.",
  "edubit.i2cWrite|param|data": "Zu schreibende Daten.",
  "edubit.i2cWrite|param|register": "Registeradresse.",
  "edubit.limit": "Begrenze den Bereich einer Zahl.",
  "edubit.limit|param|max": "Höchster Wert der Zahl.",
  "edubit.limit|param|min": "Niedrigster Wert der Zahl.",
  "edubit.limit|param|value": "Die Zahl, die wir begrenzen wollen.",
  "edubitIrBit": "Blöcke für IR Bit.",
  "edubitIrBit.isIrSensorTriggered": "Erhalte den Status des IR-Sensors (aktiviert = wahr, deaktiviert = falsch).",
  "edubitIrBit.onIrSensorEvent": "Mache etwas, wenn der IR-Sensor aktiviert / deaktiviert wird.",
  "edubitIrBit.onIrSensorEvent|param|event": "Art des Ereignisses.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Auszuführender Code, wenn das Ereignis eintritt.",
  "edubitIrBit.readIrSensor": "Erhalte den Status des IR-Sensors (aktiviert = 1, deaktiviert = 0).",
  "edubitMotors": "Blöcke für die edu:bit Servo- und Motortreiber.",
  "edubitMotors.brakeMotor": "Halte den Motor an.",
  "edubitMotors.brakeMotor|param|motor": "Motorkanal. eg: Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Schalte den Servomotor aus.",
  "edubitMotors.disableServo|param|servo": "Servomotorkanal.",
  "edubitMotors.runMotor": "Bewege den Motor vorwärts oder rückwärts (Geschwindigkeit = 0-255).",
  "edubitMotors.runMotor|param|direction": "Drehrichtung des Motors.",
  "edubitMotors.runMotor|param|motor": "Motorkanal.",
  "edubitMotors.runMotor|param|speed": "Motorgeschwindigkeit (0-255). eg: 128",
  "edubitMotors.setServoPosition": "Setze die Drehposition des Servomotors (0-180 Grad).",
  "edubitMotors.setServoPosition|param|position": "Drehposition des Servomotors. eg: 90",
  "edubitMotors.setServoPosition|param|servo": "Servomotorkanal.",
  "edubitPotentioBit": "Blöcke für Potentio Bit.",
  "edubitPotentioBit.comparePot": "Vergleicht den Potentiometer-Wert (0-1023) mit einer Zahl und ruft das Ergebnis ab (wahr/falsch).",
  "edubitPotentioBit.comparePot|param|compareType": "Mehr als oder weniger als.",
  "edubitPotentioBit.comparePot|param|threshold": "Der Wert mit dem verglichen wird. eg: 512",
  "edubitPotentioBit.onEvent": "Vergleicht den Potentiometer-Wert mit einer Zahl und tut etwas, wenn das Ergebnis wahr ist.",
  "edubitPotentioBit.onEvent|param|compareType": "Mehr als oder weniger als.",
  "edubitPotentioBit.onEvent|param|handler": "Auszuführender Code, wenn das Ereignis eintritt.",
  "edubitPotentioBit.onEvent|param|threshold": "Der Wert mit dem verglichen wird. eg: 512",
  "edubitPotentioBit.readPotValue": "Erhalte den Potentiometer-Wert (0-1023).",
  "edubitPower.isLowBatt": "Gibt wahr zurück, wenn die Batterie schwach ist.",
  "edubitPower.isOvervoltage": "Gibt wahr zurück bei Überspannung.",
  "edubitPower.isPowerOn": "Gibt wahr zurück, wenn EDU:BIT eingeschaltet ist.",
  "edubitPower.readVin": "Ruft die Eingangsspannung ab.",
  "edubitRgbBit": "Blöcke für RGB Bit.",
  "edubitRgbBit.clear": "Schaltet alle RGB-Pixel aus.",
  "edubitRgbBit.colors": "Ruft den RGB-Wert einer gegebenen Farbe ab.",
  "edubitRgbBit.rgb": "Wandelt rote, grüne und blaue Farbkanäle in eine RGB-Farbe um.",
  "edubitRgbBit.rgb|param|blue": "Wert des blauen Farbkanals (0 - 255). eg: 255",
  "edubitRgbBit.rgb|param|green": "Wert des grünen Farbkanals (0 - 255). eg: 255",
  "edubitRgbBit.rgb|param|red": "Wert des roten Farbkanals (0 - 255). eg: 255",
  "edubitRgbBit.rotatePixels": "Rotiere RGB-Pixel (-3 bis 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Anzahl der Pixel um die rotiert wird. eg: 1",
  "edubitRgbBit.setBrightness": "Setze die Helligkeit der RGB-Pixel (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Pixel-Helligkeit. eg: 25",
  "edubitRgbBit.setPixelColor": "Setze einzelnen RGB-Pixel auf eine Farbe.",
  "edubitRgbBit.setPixelColor|param|color": "RGB-Farbe des Pixels.",
  "edubitRgbBit.setPixelColor|param|pixel": "Die Nummer des Pixels dessen Farbe wir setzen wollen.",
  "edubitRgbBit.shiftPixels": "Verschiebe RGB-Pixel (-3 bis 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Anzahl der Pixel um die verschoben wird. eg: 1",
  "edubitRgbBit.showColor": "Setze alle RGB-Pixel auf die gleiche Farbe.",
  "edubitRgbBit.showColor|param|color": "RGB-Farbe des Pixels.",
  "edubitRgbBit.showRainbow": "Zeige ein Regenbogenmuster auf alle RGB-Pixel verteilt.",
  "edubitSoundBit": "Blöcke für Sound Bit.",
  "edubitSoundBit.compareSoundSensor": "Vergleicht die Eingangslautstärke (0-1023) mit einer Zahl und gibt das Ergebnis zurück (wahr/falsch).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "Mehr als oder weniger als.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "Der Wert mit dem verglichen wird. eg: 200",
  "edubitSoundBit.onEvent": "Vergleiche die Eingangslautstärke mit einer Zahl und tue etwas, wenn wahr herauskommt.",
  "edubitSoundBit.onEvent|param|compareType": "Mehr als oder weniger als.",
  "edubitSoundBit.onEvent|param|handler": "Auszuführender Code, wenn das Ereignis aufgerufen wird.",
  "edubitSoundBit.onEvent|param|threshold": "Der Wert mit dem verglichen wird. eg: 200",
  "edubitSoundBit.readSoundSensor": "Rufe die Eingangslautstärke ab (0-1023).",
  "edubitTrafficLightBit": "Blöcke für Ampel Bit.",
  "edubitTrafficLightBit.digitalStatePicker": "Rufe den digitalen IO state field Editor ab.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Digitaler IO State. eg: DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Schalte die LED an/aus (an = 1, aus = 0).",
  "edubitTrafficLightBit.setLed|param|color": "LED-Farbe.",
  "edubitTrafficLightBit.setLed|param|state": "LED-Status.",
  "edubitTrafficLightBit.toggleLed": "Schalte die LED um.",
  "edubitTrafficLightBit.toggleLed|param|color": "LED-Farbe."
}