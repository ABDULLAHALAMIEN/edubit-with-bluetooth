{
  "edubit.i2cRead": "I2C read from the register of PIC16F1937.",
  "edubit.i2cRead|param|register": "Register address.",
  "edubit.i2cWrite": "I2C write to the register of PIC16F1937.",
  "edubit.i2cWrite|param|data": "Data to write.",
  "edubit.i2cWrite|param|register": "Register address.",
  "edubit.limit": "Limit the range of a number.",
  "edubit.limit|param|max": "Maximum value of the number.",
  "edubit.limit|param|min": "Minimum value of the number.",
  "edubit.limit|param|value": "The number we want to limit.",
  "edubitIrBit": "Blocks for IR Bit.",
  "edubitIrBit.isIrSensorTriggered": "Return true if IR sensor is triggered.",
  "edubitIrBit.onIrSensorEvent": "Do something when IR sensor is triggered / not triggered.",
  "edubitIrBit.onIrSensorEvent|param|event": "Event type.",
  "edubitIrBit.onIrSensorEvent|param|handler": "Code to run when the event is raised.",
  "edubitIrBit.readIrSensor": "Return IR sensor state (0 or 1).",
  "edubitMotors": "Blocks for edu:bit servos and motors driver.",
  "edubitMotors.brakeMotor": "Brake the motor",
  "edubitMotors.brakeMotor|param|motor": "Motor channel. eg: Motor.M1, Motor.M2",
  "edubitMotors.disableServo": "Disable the servo.",
  "edubitMotors.disableServo|param|servo": "Servo channel.",
  "edubitMotors.runMotor": "Run the motor forward or backward (Speed = 0-255).",
  "edubitMotors.runMotor|param|direction": "Motor direction.",
  "edubitMotors.runMotor|param|motor": "Motor channel.",
  "edubitMotors.runMotor|param|speed": "Motor speed (0-255). eg: 128",
  "edubitMotors.setServoPosition": "Set the position for servo (0-180 degrees).",
  "edubitMotors.setServoPosition|param|position": "Servo positon. eg: 90",
  "edubitMotors.setServoPosition|param|servo": "Servo channel.",
  "edubitPotentioBit": "Blocks for Potentio Bit.",
  "edubitPotentioBit.comparePot": "Compare the potentiometer value (0-1023) with a number and return the result (true/false).",
  "edubitPotentioBit.comparePot|param|compareType": "More than or less than.",
  "edubitPotentioBit.comparePot|param|threshold": "The value to compare with. eg: 512",
  "edubitPotentioBit.onEvent": "Compare the potentiometer value with a number and do something when true.",
  "edubitPotentioBit.onEvent|param|compareType": "More than or less than.",
  "edubitPotentioBit.onEvent|param|handler": "Code to run when the event is raised.",
  "edubitPotentioBit.onEvent|param|threshold": "The value to compare with. eg: 512",
  "edubitPotentioBit.readPotValue": "Return potentiometer value (0-1023).",
  "edubitPower.isLowBatt": "Return true if low batt.",
  "edubitPower.isOvervoltage": "Return true if overvoltage.",
  "edubitPower.isPowerOn": "Return true if power is on.",
  "edubitPower.readVin": "Return power input voltage.",
  "edubitRgbBit": "Blocks for RGB Bit.",
  "edubitRgbBit.clear": "Turn off all RGB pixels.",
  "edubitRgbBit.colors": "Return the RGB value of a known color.",
  "edubitRgbBit.rgb": "Converts red, green, blue channels into a RGB color.",
  "edubitRgbBit.rgb|param|blue": "Value of the blue channel (0 - 255). eg: 255",
  "edubitRgbBit.rgb|param|green": "Value of the green channel (0 - 255). eg: 255",
  "edubitRgbBit.rgb|param|red": "Value of the red channel (0 - 255). eg: 255",
  "edubitRgbBit.rotatePixels": "Rotate the color of RGB pixels(-3 to 3).",
  "edubitRgbBit.rotatePixels|param|offset": "Number of pixels to rotate. eg: 1",
  "edubitRgbBit.setBrightness": "Set the brightness of the RGB pixels (0-255).",
  "edubitRgbBit.setBrightness|param|brightness": "Pixel brightness. eg: 25",
  "edubitRgbBit.setPixelColor": "Show color on individual RGB pixel.",
  "edubitRgbBit.setPixelColor|param|color": "RGB color of the pixel.",
  "edubitRgbBit.setPixelColor|param|pixel": "The pixel number we want to change the color.",
  "edubitRgbBit.shiftPixels": "Shift the color of RGB pixels (-3 to 3).",
  "edubitRgbBit.shiftPixels|param|offset": "Number of pixels to shift. eg: 1",
  "edubitRgbBit.showColor": "Show the same color on all RGB pixels.",
  "edubitRgbBit.showColor|param|color": "RGB color of the pixel.",
  "edubitRgbBit.showRainbow": "Show a rainbow pattern on all RGB pixels.",
  "edubitSoundBit": "Blocks for Sound Bit.",
  "edubitSoundBit.compareSoundSensor": "Compare the sound level (0-1023) with a number and return the result (true/false).",
  "edubitSoundBit.compareSoundSensor|param|compareType": "More than or less than.",
  "edubitSoundBit.compareSoundSensor|param|threshold": "The value to compare with. eg: 200",
  "edubitSoundBit.onEvent": "Compare the sound level value with a number and do something when true.",
  "edubitSoundBit.onEvent|param|compareType": "More than or less than.",
  "edubitSoundBit.onEvent|param|handler": "Code to run when the event is raised.",
  "edubitSoundBit.onEvent|param|threshold": "The value to compare with. eg: 200",
  "edubitSoundBit.readSoundSensor": "Return sound level (0-1023).",
  "edubitTrafficLightBit": "Blocks for Traffic Light Bit.",
  "edubitTrafficLightBit.digitalStatePicker": "Get the digital IO state field editor.",
  "edubitTrafficLightBit.digitalStatePicker|param|state": "Digital IO state. eg: DigitalIoState.On",
  "edubitTrafficLightBit.setLed": "Turn on/off the LED (On = 1, Off = 0).",
  "edubitTrafficLightBit.setLed|param|color": "LED color.",
  "edubitTrafficLightBit.setLed|param|state": "LED state.",
  "edubitTrafficLightBit.toggleLed": "Toggle the LED.",
  "edubitTrafficLightBit.toggleLed|param|color": "LED color."
}